<?php class Life_model extends MY_Model{    private $module = 'life';    private $table = 'life';    private $site_lang = 'en';    function __construct()    {        parent::__construct();        $this->site_lang = $this->session->userdata('site_lang');    }    function getsearchContent($limit, $page)    {        $this->db->select('*');        $this->db->limit($limit, $page);        $this->db->order_by('created_date', 'desc');        if ($this->input->post('content') != '' && $this->input->post('content') != 'type here...') {            $this->db->where('(`title` LIKE "%' . $this->input->post('content') . '%" OR `content` LIKE "%' . $this->input->post('content') . '%" OR `alias` LIKE "%' . $this->input->post('content') . '%")');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') == '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');        }        if ($this->input->post('dateFrom') == '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getTotalsearchContent()    {        $this->db->select('*');        if ($this->input->post('content') != '' && $this->input->post('content') != 'type here...') {            $this->db->where('(`title` LIKE "%' . $this->input->post('content') . '%" OR `content` LIKE "%' . $this->input->post('content') . '%")');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') == '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');        }        if ($this->input->post('dateFrom') == '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        $query = $this->db->count_all_results(PREFIX . $this->table);        if ($query > 0) {            return $query;        } else {            return false;        }    }    function getsearchContentKey($key, $limit, $page)    {        $this->db->select('*');        $this->db->limit($limit, $page);        $this->db->order_by('created_date', 'desc');        if ($key != '' && $key != 'type here...') {            $this->db->where('(`title` LIKE "%' . $key . '%" OR `content` LIKE "%' . $key . '%" OR `alias` LIKE "%' . $key . '%")');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') == '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');        }        if ($this->input->post('dateFrom') == '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getTotalsearchContentKey($key)    {        $this->db->select('*');        if ($key != '' && $key != 'type here...') {            $this->db->where('(`title` LIKE "%' . $key . '%" OR `content` LIKE "%' . $key . '%")');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') == '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');        }        if ($this->input->post('dateFrom') == '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        $query = $this->db->count_all_results(PREFIX . $this->table);        if ($query > 0) {            return $query;        } else {            return false;        }    }    function getTotalsearchContentofcategory($catid)    {        $this->db->select('*');        // var_dump($catid);exit();        if ($this->input->get('q') != '') {            $this->db->where("catid in (select id from category where parent_id='$catid' or id ='$catid') and active=1 and (`title` RegExp '" . $this->input->get('q') . "' OR `content` RegExp '" . $this->input->get('q') . "')");        }       // $this->db->where('catid', $catid);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }        /*        $query = $this->db->count_all_results(PREFIX . $this->table);      //  var_dump($query);exit();        if ($query > 0) {            return $query;        } else {            return false;        }*/    }    function getTotalsearchContentCatrep($catid)    {        $this->db->select('*');      // var_dump($catid);exit();        if ($this->input->get('q') != '') {            //select * from life where catid in (select id from category where parent_id=31) and active=1 and (`title` RegExp '2011' OR `content` RegExp '2011')            $this->db->where("(`title` RegExp '" . $this->input->get('q') . "' OR `content` RegExp '" . $this->input->get('q') . "')");        }        $this->db->where('catid', $catid);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }        /*        $query = $this->db->count_all_results(PREFIX . $this->table);      //  var_dump($query);exit();        if ($query > 0) {            return $query;        } else {            return false;        }*/    }    function getTotalsearchContentCat($catid)    {        $this->db->select('*');        if ($this->input->post('content') != '' && $this->input->post('content') != 'type here...') {            $this->db->where('(`title` LIKE "%' . $this->input->post('content') . '%" OR `content` LIKE "%' . $this->input->post('content') . '%")');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') == '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');        }        if ($this->input->post('dateFrom') == '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        $this->db->where('catid', $catid);        $query = $this->db->count_all_results(PREFIX . $this->table);        if ($query > 0) {            return $query;        } else {            return false;        }    }    function getsearchContentCat($catid, $limit, $page)    {        $this->db->select('*');        $this->db->limit($limit, $page);        $this->db->order_by($this->input->post('func_order_by'), $this->input->post('order_by'));        if ($this->input->post('content') != '' && $this->input->post('content') != 'type here...') {            $this->db->where('(`title` LIKE "%' . $this->input->post('content') . '%" OR `content` LIKE "%' . $this->input->post('content') . '%" OR `alias` LIKE "%' . $this->input->post('content') . '%")');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') == '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');        }        if ($this->input->post('dateFrom') == '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        if ($this->input->post('dateFrom') != '' && $this->input->post('dateTo') != '') {            $this->db->where('created_date >= "' . date('Y-m-d 00:00:00', strtotime($this->input->post('dateFrom'))) . '"');            $this->db->where('created_date <= "' . date('Y-m-d 23:59:59', strtotime($this->input->post('dateTo'))) . '"');        }        $this->db->where('catid', $catid);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getDetailManagement($id)    {        $this->db->select('*');        $this->db->where('id', $id);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function saveManagement($fileName = '')    {        if ($this->input->post('activeAdmincp') == 'on') {            $active = 1;        } else {            $active = 0;        }        if ($this->input->post('hotAdmincp') == 'on') {            $hot = 1;        } else {            $hot = 0;        }        if ($this->input->post('homeAdmincp') == 'on') {            $home = 1;        } else {            $home = 0;        }        $publish = strtotime($this->input->post('publishdateAdmincp'));        if ($this->input->post('hiddenIdAdmincp') == 0) {            //Kiểm tra đã tồn tại chưa?            $checkData = $this->checkData($this->input->post('titleAdmincp'));            if ($checkData) {                print 'error-title-exists';                exit;            }            $checkSlug = $this->checkSlug($this->input->post('aliasAdmincp'));            if ($checkSlug) {                print 'error-alias-exists';                exit;            }            $data = array(                'title' => $this->input->post('titleAdmincp'),                'alias' => SEO($this->input->post('aliasAdmincp')),                'summary' => $this->input->post('descAdmincp'),                'content' => $this->input->post('contentAdmincp'),                'poster' => $this->session->userdata('userInfo'),                'catid' => $this->input->post('catidAdmincp'),                'thumbnail' => $this->input->post('removeThumbnailAdmincp') == "on" ? "" : $fileName['thumbnail'],                'active' => $active,                'hot' => $hot,                'home' => $home,                'created_date' => date('Y-m-d H:i:s', time()),                'publish_date' => date('Y-m-d H:i:s', $publish)            );            if ($this->db->insert(PREFIX . $this->table, $data)) {                modules::run('admincp/saveLog', $this->module, $this->db->insert_id(), 'Add new', 'Add new');                return true;            }        } else {            $result = $this->getDetailManagement($this->input->post('hiddenIdAdmincp'));            //Kiểm tra đã tồn tại chưa?            if ($result[0]->title != $this->input->post('titleAdmincp')) {                $checkData = $this->checkData($this->input->post('titleAdmincp'));                if ($checkData) {                    print 'error-title-exists';                    exit;                }            }            if ($result[0]->alias != $this->input->post('aliasAdmincp')) {                $checkSlug = $this->checkSlug($this->input->post('aliasAdmincp'));                if ($checkSlug) {                    print 'error-alias-exists';                    exit;                }            }            //Xử lý xóa hình khi update thay đổi hình            if ($fileName['thumbnail'] == '') {                $fileName['thumbnail'] = $result[0]->thumbnail;            } else {                @unlink(BASEFOLDER . DIR_UPLOAD_LIFE . $result[0]->thumbnail);            }            //End xử lý xóa hình khi update thay đổi hình            $data = array(                'title' => $this->input->post('titleAdmincp'),                'alias' => SEO($this->input->post('aliasAdmincp')),                'summary' => $this->input->post('descAdmincp'),                'catid' => $this->input->post('catidAdmincp'),                'content' => $this->input->post('contentAdmincp', FALSE),                'thumbnail' => $this->input->post('removeThumbnailAdmincp') == "on" ? "" : $fileName['thumbnail'],                'hot' => $hot,                'home' => $home,                'active' => $active,                'publish_date' => date('Y-m-d H:i:s', $publish)            );            modules::run('admincp/saveLog', $this->module, $this->input->post('hiddenIdAdmincp'), '', 'Update', $result, $data);            $this->db->where('id', $this->input->post('hiddenIdAdmincp'));            if ($this->db->update(PREFIX . $this->table, $data)) {                return true;            }        }        return false;    }    function checkData($title)    {        $this->db->select('id');        $this->db->where('title', $title);        $this->db->limit(1);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return true;        } else {            return false;        }    }    function checkSlug($slug)    {        $this->db->select('id');        $this->db->where('alias', $slug);        $this->db->limit(1);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return true;        } else {            return false;        }    }    /*----------------------FRONTEND----------------------*/    function getNews($limit)    {        $this->db->select('*');        $this->db->where('active', 1);        if ($limit)            $this->db->limit($limit);        $this->db->order_by('created_date', 'DESC');        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getCatNews($catid, $limit)    {        $this->db->select('*');        $this->db->where('active', 1);        $this->db->where('catid', $catid);        if ($limit)            $this->db->limit($limit);        $this->db->order_by('created_date', 'DESC');        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function get_array_news($limit, $hot = null)    {        $this->db->select('*');        $this->db->where('active', 1);        if ($hot != null)            $this->db->where('hot', $hot);        if ($limit)            $this->db->limit($limit);        $this->db->order_by('created_date', 'DESC');        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result_array();        } else {            return false;        }    }    function getReindexNews()    {        $this->db->select('*');        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            $all = $query->result();            foreach ($all as $item) {                $data = array('alias' => SEO($item->title));                $this->db->where('id', $item->id);                $this->db->update(PREFIX . $this->table, $data);            }            return true;        } else {            return false;        }    }    function getPopularNews($limit)    {        $this->db->select('*');        $this->db->where('active', 1);        if ($limit)            $this->db->limit($limit);        $this->db->order_by('view_page', 'DESC');        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getRandomNews($limit)    {        $this->db->select('*');        $this->db->where('active', 1);        if ($limit)            $this->db->limit($limit);        $this->db->order_by('id', 'RANDOM');        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getRandomNewsNotTop($cat_id,$limit)    {        $this->db->select('*');        $this->db->where('catid', $cat_id);        $this->db->where('active', 1);        $this->db->limit($limit);        $this->db->order_by('id', 'RANDOM');        $query = $this->db->get(PREFIX . $this->table);        $this->db->order_by("order_num", "asc");        $this->db->order_by("publish_date", "desc");        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function saveregister(&$data)    {//var_dump($this->input->post('fullname'));exit();        $user_data = array(            'user_id' => '',            'user_name' =>$this->input->post('fullname'),            'numcard'=>$this->input->post('numcard'),            'fullname'=> $this->input->post('fullname'),            'phone'=>$this->input->post('phone'),            'address'=>$this->input->post('address'),            'user_email' =>$this->input->post('Email'),            'user_pass' => $this->input->post('password'),            'user_level'    => '1',        );        $this->load->library('form_validation');        $this->form_validation->set_data( $user_data );        $validation_rules = array(            array(                'field' => 'fullname',                'label' => 'fullname',                'rules' => 'trim|required',            ),            array(                'field' => 'user_email',                'label' => 'user_email',                'rules' => 'required|valid_email'            ),            array(                'field' => 'user_pass',                'label' => 'user_pass',                'rules' => 'trim|required',            ),            array(                'field' => 'numcard',                'label' => 'numcard',                'rules' => 'required'            ),            array(                'field' => 'phone',                'label' => 'phone',                'rules' => 'required'            ),            array(                'field' => 'address',                'label' => 'address',                'rules' => 'required'            ),            array(                'field' => 'user_level',                'label' => 'user_level',                'rules' => 'required|integer|in_list[1,6,9]'            )        );        $this->form_validation->set_rules( $validation_rules );        if( $this->form_validation->run() )        {            $this->load->model('Examples_model','user');//user_model            $user_data['user_salt']     = $this->authentication->random_salt();           /* $user_data['user_name']= $user_data['user_name'];            $user_data['numcard']= $user_data['numcard'];            $user_data['phone']= $user_data['phone'];            $user_data['address']= $user_data['address'];*/            $user_data['user_pass']     = $this->authentication->hash_passwd($user_data['user_pass'], $user_data['user_salt']);            $user_data['user_id']       = $this->user->get_unused_id();            $user_data['user_date']     = date('Y-m-d H:i:s');            $user_data['user_modified'] = date('Y-m-d H:i:s');            // If username is not used, it must be entered into the record as NULL          /*  if( empty( $user_data['user_name'] ) )            {$user_data['user_salt']                $user_data['user_name'] = NULL;            }*/            $this->db->set($user_data)                ->insert(config_item('user_table'));            if ($this->db->affected_rows() == 1) {                return true;               // echo '<h1>Congratulations</h1>' . '<p>User ' . $user_data['user_name'] . ' was created.</p>';            }        }        else        {           // $data['b_err']=array('err' =>$this->form_validation->set_message('required', 'Your custom message here'));            return false;           // echo '<h1>User Creation Error(s)</h1>' . validation_errors();        }    }    function Savebooking($auth_user_id)    {        $datestring = "%Y-%m-%d";        $code=$this->input->post('code');        $codein=$this->Auto_increment("id","booking_car");        if($codein>$code)        {            $code=$codein;        }        $time= mdate($datestring,strtotime($this->input->post('date')));      //  $now=datetime.now();var_dump($now);exit();        $data = array(            'id' => '',            'type_car_id' =>$this->input->post('Type'),            'from_id' => $this->input->post('from'),            'to_id' => $this->input->post('To'),            'settime_car' => $time,            'user_id' =>$auth_user_id,            'phone'=> "",            'email'=> "",            'code' => $code ,            'checktime'=>date('Y-m-d H:i:s', time()) ,            'status' => "1"        );        if ($this->db->insert(PREFIX ."booking_car", $data)) {          //  modules::run('admincp/saveLog', $this->module, $this->db->insert_id(), 'Add new', 'Add new');            return true;        }else{            return false;        }        //"INSERT INTO `global_main`.`booking_car` (`id`, `type_car_id`, `from_id`, `to_id`, `settime_car`, `user_id`, `code`, `status`) VALUES (NULL, '01', '22', '23', '2015-07-31 05:08:18', '1', '123sdas', '1');";       /* $query = $this->db->get(PREFIX . 'type_car');        if ($query->result()) {            return $query->result();        } else {            return false;        }*/    }    function Savebookingfull($code)    {        $datestring = "%Y-%m-%d";        $time= mdate($datestring,strtotime($this->input->post('date')));        //  $now=datetime.now();var_dump($now);exit();        $data = array(            'id' => '',            'type_car_id' =>$this->input->post('Type'),            'from_id' => $this->input->post('from'),            'to_id' => $this->input->post('To'),            'settime_car' => $time,            'user_id' =>'0',            'phone'=> $this->input->post('txtphone'),            'email'=> $this->input->post('txtemail'),            'code' => $code,            'checktime'=>date('Y-m-d H:i:s', time()) ,            'status' => "1"        );        if ($this->db->insert(PREFIX ."booking_car", $data)) {            //  modules::run('admincp/saveLog', $this->module, $this->db->insert_id(), 'Add new', 'Add new');            return true;        }else{            return false;        }    }    function getTypeCar()    {        $this->db->select('*');        $query = $this->db->get(PREFIX . 'type_car');        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getProvince()    {        $this->db->select('*');        $query = $this->db->get(PREFIX . 'province');        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getHitNews($limit)    {        $this->db->select('*');        $this->db->where('active', 1);        $this->db->where('view_page >', 20);        if ($limit)            $this->db->limit($limit);        $this->db->order_by('id', 'RANDOM');        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getRandomNewsQuestion($limit)    {        $this->db->select('*');        $this->db->where('active', 1);        $this->db->where('catid', 2);        if ($limit)            $this->db->limit($limit);        $this->db->order_by('id', 'RANDOM');        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getOlderNews($id, $limit)    {        $this->db->select('*');        $this->db->where('active', 1);        if ($id)            $this->db->where('id <', $id);        if ($limit)            $this->db->limit($limit);        $this->db->order_by('created_date', 'DESC');        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getNewsDetail($alias_detail)    {        $this->db->select('*');        $this->db->where('alias', $alias_detail);        $this->db->where('active', 1);        $this->db->limit(1);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getSingleNewsDetail($alias_detail)    {        $this->db->select('*');        $this->db->where('alias', $alias_detail);        $this->db->where('active', 1);        $this->db->limit(1);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->row();        } else {            return false;        }    }    function getCategoryByName($catid)    {        $this->db->select('*');        $this->db->where('id', $catid);        $this->db->limit(1);        $query = $this->db->get(PREFIX . 'category');        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function getCategoryById($catid)    {        $this->db->select('*');        $this->db->where('id', $catid);        $this->db->limit(1);        $query = $this->db->get(PREFIX . 'category');        if ($query->result()) {            return $query->row();        } else {            return false;        }    }    function update_view_page($alias)    {        $this->db->where('alias', $alias);        $this->db->set('view_page', 'view_page+1', FALSE);        if ($this->db->update('life')) {            return true;        } else {            return false;        }    }    function check_view_ip()    {        $this->db->like('created', date('Y-m-d', time()));        $this->db->where('ip', getIP());        $query = $this->db->get('countip');        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    function update_view_ip($ishome = 0) //$ishome = 1: View Home    {        $data = array(            'ip' => getIP(),            'ishome' => $ishome,            'created' => date('Y-m-d H:i:s', time()),        );        $this->db->insert('countip', $data);    }    public function listall($offset, $start)    {        $this->db->limit($offset, $start);        $this->db->where('active', 1);        $this->db->order_by("id", "desc");        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    public function list_article_all($cat_id, $offset, $start)    {        $this->db->limit($offset, $start);        $this->db->where('catid', $cat_id);        $this->db->where('active', 1);        $this->db->order_by("order_num", "asc");        $this->db->order_by("publish_date", "desc");        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    public function list_article_all_catagory($cat_id, $offset, $start)    {        $this->db->where("catid in (select id from category where parent_id='$cat_id' or id='$cat_id') and active=1");        $this->db->order_by("order_num", "asc");        $this->db->order_by("publish_date", "desc");        $this->db->limit($offset,$start);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    public function list_article_all_catagory_count_article_all($cat_id)    {        $this->db->where("catid in (select id from category where parent_id='$cat_id' or id='$cat_id') and active=1");        $query = $this->db->count_all_results(PREFIX . $this->table);        if ($query > 0) {            return $query;        } else {            return false;        }    }    public function list_article_all_g($cat_id, $offset, $start)    {        $this->db->select('*');        $this->db->where('catid', $cat_id);        $this->db->where('active', 1);        $this->db->order_by("order_num", "asc");        $this->db->order_by("publish_date", "desc");        $this->db->limit($start);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    public function list_article_all_g_limit($cat_id, $limit, $start)    {        $this->db->select('*');        $this->db->where('catid', $cat_id);        $this->db->where('active', 1);        $this->db->order_by("order_num", "asc");        $this->db->order_by("publish_date", "desc");       // $this->db->limit(2,0);        $this->db->limit($start,$limit);        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    public function list_img_from_life_slider_with_position($cat_id)//lấy tất giới hạn hình từ life và slider    {        $df=" Select  thumbnail,col"." From  (".            " Select	thumbnail, 1 as col".            " From	life WHERE alias='$cat_id'".            " Union".            "  Select	image As thumbnail,2 as col".            " From	slider where position=(select id from slider_position where code ='$cat_id' )".            " ) As T".            " Group By thumbnail,col".            " limit 3";        $query =$this->db->query($df);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    public function list_catagory_from_parent($cat_id)//lay tat ca danh muc con tu danh muc cha    {   settype($cat_id,"int");        $this->db->select('*');        $this->db->where("parent_id",$cat_id);        $this->db->where("active",1);        $this->db->order_by("order", "asc");        $query = $this->db->get(PREFIX . 'category');        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    public function list_menu_root($id)//lay tat ca danh muc con tu danh muc cha    {        $this->db->select('*');        $this->db->where('parent_id', $id);        $this->db->order_by("order", "asc");        $query = $this->db->get(PREFIX . 'category');        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    public function list_article_with_category($catid,$limit=4)    {        $this->db->limit($limit);        $this->db->select('*');        $this->db->where('catid', $catid);        $this->db->order_by("id", "asc");        $query = $this->db->get(PREFIX . 'life');        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    public function list_article_all_is_home($cat_id, $offset, $start)    {        $this->db->limit($offset, $start);        $this->db->where('catid', $cat_id);        $this->db->where('active', 1);        $this->db->where('home', 1);        $this->db->order_by("id", "desc");        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->result();        } else {            return false;        }    }    public function first_article($cat_id)    {        $this->db->where('catid', $cat_id);        $this->db->where('active', 1);        $this->db->order_by("id", "desc");        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->row();        } else {            return false;        }    }    public function first_article_is_home($cat_id)    {        $this->db->where('catid', $cat_id);        $this->db->where('active', 1);        $this->db->where('home', 1);        $this->db->order_by("id", "desc");        $query = $this->db->get(PREFIX . $this->table);        if ($query->result()) {            return $query->row();        } else {            return false;        }    }    public function count_all()    {        $this->db->where('active', 1);        return $this->db->count_all(PREFIX . $this->table);    }    function checkCatSlugNotLang($slug)    {       // $slug = ($this->site_lang ? $this->site_lang : "vn") . "_" . $slug;        $this->db->select('id');        $this->db->where('alias', $slug);        $this->db->limit(1);        $query = $this->db->get(PREFIX . 'category');        if ($query->result()) {            $row = $query->row();            return $row->id;        } else {            return 0;        }    }    function checkCatSlug($slug)    {       $slug = ($this->site_lang ? $this->site_lang : "vn") . "_" . $slug;        $this->db->select('id');        $this->db->where('alias', $slug);        $this->db->limit(1);        $query = $this->db->get(PREFIX . 'category');        if ($query->result()) {            $row = $query->row();            return $row->id;        } else {            return 0;        }    }    function GetCar($id)    {        $this->db->select('name');        $this->db->where('id', $id);        $this->db->limit(1);        $query = $this->db->get(PREFIX . 'type_car');        if ($query->result()) {            $row = $query->row();            return $row->name;        } else {            return 0;        }    }    function GetfromTo($id)    {        $this->db->select('name');        $this->db->where('provinceid', $id);        $this->db->limit(1);        $query = $this->db->get(PREFIX . 'province');        if ($query->result()) {            $row = $query->row();            return $row->name;        } else {            return 0;        }    }    function Auto_increment($col,$table)    {        $this->db->select('MAX('.$col.') as cola');       // $query = mysql_query("SELECT MAX(`$col`) as cola FROM `$table`");        $query = $this->db->get(PREFIX . $table);        //  $results = mysql_fetch_array($query);        //  $cur_auto_id = $results['MAX($col)'] + 1;        if ($query->result()) {            $row = $query->row();            return $row->cola+1;        } else {            return 0;        }      //  $cur_auto_id=mysql_fetch_assoc($query);      //  $tring =$cur_auto_id['cola']+1;      //  return $tring;    }    public function count_article_all($cat_id)    {        $this->db->where('catid', $cat_id);        $this->db->where('active', 1);        $this->db->from(PREFIX . $this->table);        return $this->db->count_all_results();    }    public function get_cat_all()    {        $this->db->select('*');        $this->db->where('parent_id', null);        $this->db->order_by("id", "asc");        $query = $this->db->get(PREFIX . 'category');        if ($query->result()) {            return $query->result_array();        } else {            return false;        }    }    public function saveEnroll($name, $email, $phone)    {        $data = array(            'name' => $name,            'phone' => $email,            'email' => $phone        );        if ($this->db->insert(PREFIX . 'enroll', $data)) {            return true;        }        return false;    }    /*--------------------END FRONTEND--------------------*/}